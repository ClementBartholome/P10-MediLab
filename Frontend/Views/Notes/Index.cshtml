@using P10___MédiLabo___Patients_API.Enums
@using P10___MédiLabo___Patients_API.Extensions
@model DetailPatientViewModel

<section class="container mt-5">
    <nav aria-label="breadcrumb" class="mb-4">
        <ol class="breadcrumb">
            <li class="breadcrumb-item"><a asp-controller="Patients" asp-action="Index">Patients</a></li>
            <li class="breadcrumb-item active" aria-current="page">@Model.Patient.Prenom @Model.Patient.Nom</li>
        </ol>
    </nav>

    <div class="row mb-4">
        <!-- Colonne gauche avec informations patient et risque -->
        <div class="col-lg-4 mb-4 mb-lg-0">
            <!-- Carte informations patient -->
            <div class="card h-auto shadow-sm mb-4">
                <div class="card-header bg-primary text-white d-flex justify-content-between align-items-center">
                    <h4 class="mb-0">
                        <i class="fa-solid fa-user me-2"></i>
                        Informations
                    </h4>
                    <a asp-controller="Patients" asp-action="Edit" asp-route-id="@Model.Patient.Id"
                       class="btn btn-sm btn-light">
                        <i class="fa-solid fa-user-edit me-1"></i> Modifier
                    </a>
                </div>
                <div class="card-body">
                    <div class="text-center mb-4">
                        <div class="avatar-circle mb-3">
                            <img src="https://randomuser.me/api/portraits/men/@(Model.Patient.Id % 100).jpg"
                                 alt="Avatar"
                                 class="rounded-circle shadow"
                                 width="96" height="96" />
                            </div>
                        <h3>@Model.Patient.Prenom @Model.Patient.Nom</h3>
                    </div>

                    <dl class="row">
                        <dt class="col-sm-5"><i class="fa-solid fa-calendar-alt me-2"></i>Naissance</dt>
                        <dd class="col-sm-7">@Model.Patient.DateNaissance.ToString("dd/MM/yyyy") (@(DateTime.Now.Year - Model.Patient.DateNaissance.Year) ans)</dd>

                        <dt class="col-sm-5"><i class="fa-solid fa-venus-mars me-2"></i>Genre</dt>
                        <dd class="col-sm-7">@(((GenreEnum)Model.Patient.Genre).GetDisplayName())</dd>

                        <dt class="col-sm-5"><i class="fa-solid fa-map-marker-alt me-2"></i>Adresse</dt>
                        <dd class="col-sm-7">@(string.IsNullOrEmpty(Model.Patient.Adresse) ? "Non renseignée" : Model.Patient.Adresse)</dd>

                        <dt class="col-sm-5"><i class="fa-solid fa-phone me-2"></i>Téléphone</dt>
                        <dd class="col-sm-7">@(string.IsNullOrEmpty(Model.Patient.Telephone) ? "Non renseigné" : Model.Patient.Telephone)</dd>
                    </dl>
                </div>
            </div>

            <!-- Carte évaluation risque -->
            @if (Model.RiskAssessment != null)
            {
            <div class="card shadow-sm">
                <div class="card-header @Model.RiskAssessment.BadgeClass text-white">
                    <h5 class="mb-0">
                        <i class="fas @Model.RiskAssessment.Icon me-2"></i>
                        Évaluation du risque de diabète
                    </h5>
                </div>
                <div class="card-body">
                    <div class="text-center mb-4">
                        <div class="risk-indicator @Model.RiskAssessment.BadgeClass">
                            <span class="risk-level">@Model.RiskAssessment.RiskLevelLabel</span>
                        </div>
                    </div>


                    @if (Model.RiskAssessment.TriggerTermsFound.Any())
                    {
                        <h6 class="fw-bold mb-2">
                            <span class="badge bg-primary rounded-pill">@Model.RiskAssessment.TriggerTermsFound.Count</span>
                            @((Model.RiskAssessment.TriggerTermsFound.Count == 1) ? "terme déclencheur détecté" : "termes déclencheurs détectés")
                        </h6>
                        <div class="list-group list-group-flush">
                            @foreach (var term in Model.RiskAssessment.TriggerTermsFound)
                            {
                                <div class="list-group-item d-flex justify-content-between align-items-center px-0 py-2 border-start-0 border-end-0">
                                    <span>@term.Key</span>
                                    <small class="text-muted ms-2">dans @term.Value note@(term.Value > 1 ? "s" : "")</small>
                                </div>
                            }
                        </div>
                    }
                    else if (Model.RiskAssessment.NoteCount > 0)
                    {
                    <div class="alert alert-success">
                        <i class="fas fa-check-circle me-2"></i>
                        Aucun terme déclencheur détecté dans les notes médicales.
                    </div>
                    }
                    else
                    {
                    <div class="alert alert-info">
                        <i class="fas fa-info-circle me-2"></i>
                        Aucune note médicale trouvée pour ce patient.
                    </div>
                    }
                </div>
            </div>
            }
        </div>

        <!-- Colonne droite avec notes médicales -->
        <div class="col-lg-8">
            <div class="card shadow-sm">
                <div class="card-header bg-primary text-white d-flex justify-content-between align-items-center">
                    <h4 class="mb-0">
                        <i class="fa-solid fa-clipboard-list me-2"></i>
                        Notes médicales (@(Model.Notes?.Count ?? 0))
                    </h4>
                    <a asp-action="Create" asp-route-patientId="@Model.Patient.Id" class="btn btn-sm btn-light">
                        <i class="fa-solid fa-plus me-1"></i> Ajouter une note
                    </a>
                </div>
                <div class="card-body p-0">
                    @if (Model.Notes is { Count: > 0 })
                    {
                    <div class="timeline p-3">
                        @foreach (var note in Model.Notes.OrderByDescending(n => n.Date))
                        {
                        <div class="timeline-item">
                            <div class="timeline-date">
                                        <span class="badge bg-secondary">
                                            <i class="fa-regular fa-calendar me-1"></i>
                                            @TimeZoneInfo.ConvertTimeFromUtc(note.Date, TimeZoneInfo.FindSystemTimeZoneById("Romance Standard Time")).ToString("dd/MM/yyyy HH:mm", System.Globalization.CultureInfo.GetCultureInfo("fr-FR"))
                                        </span>
                            </div>
                            <div class="timeline-content">
                                <div class="card mb-3">
                                    <div class="card-body">
                                        <p class="card-text">@note.Note</p>
                                        <div class="text-end">
                                            <a asp-action="Edit" asp-route-id="@note.Id"
                                               class="btn btn-sm btn-outline-primary">
                                                <i class="fa-solid fa-pen-to-square me-1"></i> Éditer
                                            </a>
                                            <button type="button" class="btn btn-sm btn-outline-danger"
                                                    data-bs-toggle="modal"
                                                    data-bs-target="#deleteModal-@note.Id">
                                                <i class="fa-solid fa-trash me-1"></i> Supprimer
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        @await Html.PartialAsync("_DeleteConfirmationModal", new DeleteConfirmationViewModel
                        {
                        ItemId = note.Id,
                        ItemName = $"du {note.Date:dd/MM/yyyy}",
                        ItemTypeDescription = "la note",
                        WarningMessage = "Cette action est irréversible.",
                        ControllerName = "Notes",
                        AdditionalParameters = new Dictionary<string, string>
                        {
                        { "patientId", Model.Patient.Id.ToString() }
                        }
                        })
                        }
                    </div>
                    }
                    else
                    {
                    <div class="text-center py-5">
                        <i class="fa-solid fa-clipboard fa-3x mb-3 text-muted"></i>
                        <p class="lead">Aucune note disponible pour ce patient.</p>
                        <a asp-action="Create" asp-route-patientId="@Model.Patient.Id" class="btn btn-primary mt-2">
                            <i class="fa-solid fa-plus me-1"></i> Créer la première note
                        </a>
                    </div>
                    }
                </div>
            </div>
        </div>
    </div>
</section>

<style>
    .timeline {
        position: relative;
        padding-left: 1.5rem;
    }

    .timeline-item {
        position: relative;
        padding-bottom: 1.5rem;
        border-left: 2px solid #dee2e6;
        padding-left: 1.5rem;
    }

    .timeline-date {
        margin-bottom: 0.5rem;
    }

    .timeline-item::before {
        content: '';
        position: absolute;
        left: -0.5rem;
        top: 0;
        width: 1rem;
        height: 1rem;
        border-radius: 50%;
        background-color: #0d6efd;
        border: 2px solid white;
        box-shadow: 0 0 0 1px #dee2e6;
    }

    .avatar-circle {
        width: 100px;
        height: 100px;
        background-color: #0d6efd;
        text-align: center;
        border-radius: 50%;
        -webkit-border-radius: 50%;
        -moz-border-radius: 50%;
        margin: 0 auto;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .initials {
        font-size: 2.5rem;
        color: white;
        font-weight: bold;
    }

    .risk-indicator {
        display: inline-block;
        padding: 1.5rem 2rem;
        border-radius: 50%;
        color: white;
        font-weight: bold;
        margin-bottom: 1rem;
    }

    .risk-level {
        font-size: 1.25rem;
        text-transform: uppercase;
    }

    .bg-success .risk-level::after { content: " ✓"; }
    .bg-warning .risk-level::after { content: " 🟠"; }
    .bg-danger .risk-level::after { content: " ⚠️"; }
    .bg-dark .risk-level::after { content: " ⚠️⚠️"; }
</style>